function [smoothed_post_prob] = dynamic_smoothing(post_probabilities, trial_labels, alpha)
%[smoothed_post_prob] = dynamic_smoothing(post_probabilities, trial_labels, alpha)
%	Applies evidence accumulation with dynamic smoothing (for binary classification)
%   Input arguments:
%       -post_probabilities: [samples x num_classes] matrix of probabilities
%           generated by a (binary) classificator
%       -trial_labels: vector of indices [samples x 1], which indicates for each
%        sample the corresponding trial (MI task) [11...1122...22...]
%        (without zeros)   
%       -inial_value: starting value for the smoothing for each trial
%
%   Output arguments:
%       -smoothed_post_prob: [samples x 1] matrix containing the result of
%       the application of dynamic smoothing on the input's posterior
%       probabilities (dividing each trial)
%       Values are in [0, 1]
%
%       First class: values tending to 1
%       Second class: values tending to 0
%       Undecided: in the middle
%            
%       Note: the function will only consider the first class' posterior
%       probabilities, see the lessons' slides for details   
    [free_support, free_force] = f_free(0.8);
    [bmi_support, bmi_force] = f_bmi();
    trial_labels = trial_labels(trial_labels ~= 0); %just to be sure
    
    smoothed_post_prob = zeros(size(post_probabilities, 1), 1);
    sample_offset = 0;
    
    num_trials = max(trial_labels);
        for trial_n = 1:num_trials
        curr_trial_post_prob = post_probabilities(trial_labels == trial_n, :);
        
        if(isempty(curr_trial_post_prob))
            continue
        end
  
        smoothed_post_prob(sample_offset+1,1) = curr_trial_post_prob(1,1);
        
        for j = 2:size(curr_trial_post_prob)
            delta = f_free_val(0.8, smoothed_post_prob(sample_offset+j-1,1));
            delta = delta + f_bmi_val(curr_trial_post_prob(j,1));
            smoothed_post_prob(sample_offset+j,1) = alpha*smoothed_post_prob(sample_offset+j-1,1) +(1-alpha)*delta;
        end
        
        sample_offset = sample_offset + j;
    end
    
end

function [y] = f_free_val(conservative_amp, x)
    if x <= 0.3
        y = -sin((pi./0.3)*x);
    end
    
    if x >= 0.7
        y = sin((pi./0.3)*x);
    end
    
    if (x > 0.3 && x < 0.7)
        y = conservative_amp * sin((1./0.2)*pi*(x-0.3));
    end
        
end

function [y] = f_bmi_val(x)
    y = (asin(x)./asin(1)).*(0.5 .* (1-cos(pi.*x)));
end

function [support, value] = f_free(conservative_amp)
%   Produces the free force of dynamic system smoothing (see report for details)
%   Input arguments:
%       -conservative_amp: amplitude of the sinusoid in [0.3, 0.7]
%
%   Output parameters:
%       -support: vector of the support values of the curve [0, 1] with
%        4-th decimal precision
%       -value: contains the curve itself
    t_1 = 0:0.0001:0.3;
    t_2 = 0.3001:0.0001:0.7;
    t_3 = 0.7001:0.0001:1;
    
    support = [t_1, t_2, t_3];
    value = [-sin((pi./0.3).*t_1), conservative_amp.*sin((1./0.2)*pi.*(t_2-0.3)), sin((pi./0.3).*t_1(2:end))];
end

function [support, value] = f_bmi()
%   Produces the BMI force of dynamic system smoothing (see report for details)
%   Output parameters:
%       -support: vector of the support values of the curve [0, 1] with
%        4-th decimal precision
%       -value: contains the curve itself
    x = -1:.0001:1;
    value = (asin(x(1:2:end))./asin(1)).*(0.5 .* (1-cos(pi.*x(1:2:end))));
    support = 0:0.0001:1;
end