function [smoothed_post_prob] = exponential_smoothing(post_probabilities, trial_labels, inial_value, alpha)
%   [smoothed_post_prob] = exponential_smoothing(post_probabilities, trials, inial_value, alpha)
%	Applies evidence accumulation with exponential smoothing (for binary classification)
%   Input arguments:
%       -post_probabilities: [samples x num_classes] matrix of probabilities
%           generated by a (binary) classificator
%       -trial_labels: vector of indices [samples x 1], which indicates for each
%        sample the corresponding trial (MI task) [11...1122...22...]
%        (without zeros)   
%
%       -inial_value: starting value for the smoothing for each trial
%       -alpha: smoothing parameter of exponential smoothing
%   Output arguments:
%       -smoothed_post_prob: [samples x 1] matrix containing the result of
%       the application of exponential smoothing on the input's posterior
%       probabilities (dividing each trial)
%       Values are in [0, 1]
%
%       First class: values tending to 1
%       Second class: values tending to 0
%       Undecided: in the middle
%            
%       Note: the function will only consider the first class' posterior
%       probabilities, see the lessons' slides for details
    trial_labels = trial_labels(trial_labels ~= 0); %just to be sure
    
    smoothed_post_prob = inial_value*ones(size(post_probabilities, 1), 1);
    sample_offset = 0;
    num_trials = max(trial_labels);
    for trial_n = 1:num_trials
        curr_trial_post_prob = post_probabilities(trial_labels == trial_n, :);
        for j = 2:size(curr_trial_post_prob)
            smoothed_post_prob(sample_offset+j,1) = smoothed_post_prob(sample_offset+j-1,1).*alpha + curr_trial_post_prob(j, 1).*(1-alpha);
        end
        sample_offset = sample_offset + j;
    end

end

